//                            Arrays Excersises

//1] Take array input in java

sol]

package javatpoint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

public class Student{
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);
		int[] arr = new int[5];
		
		System.out.println("Enter the elements  of the array: ");
		for(int i=0; i<arr.length;i++) {
			arr[i] = input.nextInt();
		}
		
		for(int i=0;i<arr.length;i++) {
			System.out.print(arr[i]+" ");
		}
		
	}
	
}

op:- 
Enter the elements  of the array: 
1 2 3 4 5 6 7 
1 2 3 4 5 

//2] Define an array, input elements and get the sum of elements in that array using a method for the sum part.

sol]
package javatpoint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

public class Student{
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);
		int[] arr = new int[5];
		
		System.out.println("Enter the elements  of the array: ");
		for(int i=0; i<arr.length;i++) {
			arr[i] = input.nextInt();
		}
		
		for(int i=0;i<arr.length;i++) {
			System.out.print(arr[i]+" ");
		}
		System.out.println();
		sumOfArrayElements(arr);
	}
	
	static void sumOfArrayElements(int[] arr) {
		int sum = 0;
		for(int i =0;i<arr.length;i++) {
			sum += arr[i];	
		}
		System.out.println("The sum of elements is: "+ sum);
	}
}

op:- 
Enter the elements  of the array: 
1 2 3 4 5
1 2 3 4 5 
The sum of elements is: 15

//3] return an array in java

sol]
package javatpoint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

public class Student{
	public static void main(String[] args) {
		int[] arr = userDefinedArray();
		
		System.out.println("The new array is: ");
		for(int i=0; i<arr.length;i++) {
			System.out.print(arr[i]+" ");
		}
	}
	
	//method to create a user defined array
	static int[] userDefinedArray() { //we have to give return type as an integer array(int[])
		Scanner input = new Scanner(System.in);
		int n=0;//number of elements in an array
		int[] arr = null; //empty array
		
		//initialize size of array
		System.out.println("Enter the size of array: ");
		n = input.nextInt();
		
		//define the array of size n
		arr = new int[n];
		
		System.out.println("Enter the elements of the array: ");
		for(int i=0; i<arr.length;i++) {
			arr[i] = input.nextInt();
		}
		
		return arr;
	}
}

op:-
Enter the size of array: 
3
Enter the elements of the array: 
12 13 167
The new array is: 
12 13 167 

//4] Sum of the array elements

package javatpoint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

public class Student{
	public static void main(String[] args) {
		int sum = sumOfArray();
		
		System.out.println("The sum of arrat elements is: "+sum);
	}
	
	static int sumOfArray() {
		Scanner input = new Scanner(System.in);
		int sum = 0;
		int[] arr = null;
		
		System.out.println("Enter the size of array: ");
		int size = input.nextInt();
		
		arr = new int[size];
		System.out.println("Enter the elements of the array: ");
		for(int i = 0; i<arr.length;i++) {
			arr[i] = input.nextInt();
		}
		
		for(int i = 0; i<arr.length;i++) {
			sum+=arr[i];
		}
		return sum;
	
	}
}

op:- 
Enter the size of array: 
3
Enter the elements of the array: 
1
2
3
The sum of array elements is: 6

//5] Average of array elements

package javatpoint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

public class Student{
	public static void main(String[] args) {
		double avg = averageOfArray();
		
		System.out.println("The average of array elements is: "+avg);
	}
	
	static double averageOfArray() {
		Scanner input = new Scanner(System.in);
		int sum = 0;
		int[] arr = null;
		
		System.out.println("Enter the size of array: ");
		int size = input.nextInt();
		
		arr = new int[size];
		System.out.println("Enter the elements of the array: ");
		for(int i = 0; i<arr.length;i++) {
			arr[i] = input.nextInt();
		}
		
		for(int i = 0; i<arr.length;i++) {
			sum+=arr[i];
		}
		
		double avg = sum/size;
		return avg;
	
	}
}

op:-

Enter the size of array: 
5
Enter the elements of the array: 
10 20 30 40 50
The average of array elements is: 30.0

//6. Add 2 arrays

sol] 
package javatpoint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

public class Student{
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);
		
		//initializing the size of the array
		System.out.print("Enter the array1 size: ");
		int array1Size = input.nextInt();
		System.out.print("Enter the array2 size: ");
		int array2Size = input.nextInt();
		
		//if condition to see if both the sizes are same or not
		if(array1Size != array2Size) {
			System.out.println("Both arrays must be of same size");
			return; //ends the program if the condition is met
		}
		
		//declaring 3 arrays with default sizes
		//since  array sizes must be same, we can put both the sizes
		int[] array1 = new int[array1Size]; 
		int[] array2 = new int[array2Size];
		int[] array3 = new int[array1Size];
		
		//inputing array1 values using for loop
		System.out.println("Enter the elements for array1: ");
		for(int i=0; i<array1.length;i++) {
			array1[i] = input.nextInt();
		}
		
		//inputing array1 values using for loop
		System.out.println("Enter the elements for array2: ");
		for(int i=0; i<array2.length;i++) {
			array2[i] = input.nextInt();
		}
		
		for(int i=0;i<array3.length;i++) {
			array3[i] = array1[i]+array2[i];
		}
		
		System.out.println("The resultant array is: ");
		System.out.println(Arrays.toString(array3));
	
	}
}

op:-
Enter the array1 size: 5
Enter the array2 size: 5
Enter the elements for array1: 
10 20 30 40 50
Enter the elements for array2: 
9 18 27 36 45
The resultant array is: 
[19, 38, 57, 76, 95]

//7. How to check if 2 arrays are equal or not.(also, Downside of using Arrays.equals() mentioned)

sol]
package javatpoint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

public class Student{
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);
		
		System.out.println("Enter the array size for array1: ");
		int arraySize1 = input.nextInt();
		System.out.println("Enter the array size for array2: ");
		int arraySize2 = input.nextInt();
		
		//creating empty arrays
		int[] array1 = null;
		int[] array2 =null;
		
		//filling values into array1
		System.out.println("Enter the values for array1: ");
		array1 = new int[arraySize1];
		for(int i=0; i<array1.length;i++) {
			array1[i] = input.nextInt();
		}
/* case1:-		
*
*		assigning array1's value to array2
*		array2 = array1;
*
*  output:- returns true, as both the arrays are same.
*/	

// case2:-
		//filling values into array2
		System.out.println("Enter the values for array2: ");
		array2 = new int[arraySize2];
		for(int i=0; i<array2.length;i++) {
			array2[i] = input.nextInt();
		}
		
		System.out.println(Arrays.toString(array1));
		System.out.println(Arrays.toString(array2));
		
//		tried using array1 == array2, didn't work!
//		After using Arrays.equals(array1,array2), we get the results properly.
//		But Arrays.equals wont work for multi-dimensional arrays.
		
		if(Arrays.equals(array1,array2)) {
			System.out.println("Both the arrays are identical.");
			return;
		}
		else {
			System.out.println("both the arrays are different.");
			return;
		}

	
	}
}


op:-
Enter the array size for array1: 
3
Enter the array size for array2: 
3
Enter the values for array1: 
11
12
13
Enter the values for array2: 
11
121
123
[11, 12, 13]
[11, 121, 123]
both the arrays are different.

//8. How to copy arrays in java

sol:-

//Method 1:- Shallow copy method:- means copying an array using '=' operator
//Limitation:- if we change original array, copy will also change

package javatpoint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

public class Student{
	public static void main(String[] args) {

		int[] arr1 = {1,2,3,4,5};
		int[] copyArr = arr1;
		System.out.println("original:- "+Arrays.toString(arr1));
		System.out.println("copy:- "+Arrays.toString(copyArr));
		
}
}

op:-
original:- [1, 2, 3, 4, 5]
copy:- [1, 2, 3, 4, 5]

 
/* Method 2: Deep copy of array
*  In this method we basically create a new array of same data type and length as our original array. 
*  Then we use for loop to iterate through the original array. Then we copy the original array elements 
*  to our new array elements.
*  
*  The benefit of this method is that, even if we change the original array elements the new array 
*  elements won't change.
*/

package javatpoint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;


public class Student{
	public static void main(String[] args) {
		
		
		int[] arr = {1,2,3,4,5};
		int[] tempArr = new int[arr.length]; //temp array to store original array values
		
		for(int i =0; i<arr.length;i++) {
			tempArr[i] = arr[i];
		}
		
		System.out.println("Arrays before changing elements: ");
		System.out.println("first Array elements: "+Arrays.toString(arr));
		System.out.println("new array elements: "+Arrays.toString(tempArr));

		//changing elements of original array
		arr[0] = 34;
		arr[3] = 67;
		
		System.out.println("Arrays after changing elements: ");
		System.out.println("first Array elements: "+Arrays.toString(arr));
		System.out.println("new array elements: "+Arrays.toString(tempArr));
		
	}
}

op:-
Arrays before changing elements: 
first Array elements: [1, 2, 3, 4, 5]
new array elements: [1, 2, 3, 4, 5]
Arrays after changing elements: 
first Array elements: [34, 2, 3, 67, 5]
new array elements: [1, 2, 3, 4, 5]

//method 3:- System.arraycopy() method
/*System.arraycopy() method:- It copies an array from the specified source array, beginning at the 
	 *	specified position, to the specified position of the destination array.
	 *Syntax:- 
	 *	System.arrayCopy(object src, int srcPos, Object dest, int destPos, int length);
	 *here,
	 	* 	src:- source array
	 	* 	srcPos:- Starting position in destination array
	 	* 	dest:- the destination array.
	 	* 	destPos:- starting position in destination array
	 	* 	length:- length of the array elements to be copied 	
*/
package javatpoint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;


public class Student{
	public static void main(String[] args) {
	
	int[] arr = {1,2,3,4,5};
	
	int[] newArr = new int[arr.length];
	
	System.arraycopy(arr, 0, newArr, 0, arr.length);
	
	System.out.println(Arrays.toString(arr));
	System.out.println(Arrays.toString(newArr));
	}
}

op:- 
[1, 2, 3, 4, 5]
[1, 2, 3, 4, 5]

//9. merge to arrays in java

sol]
//normal method

package javatpoint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;


public class Student{
	public static void main(String[] args) {
	
	int[] arr1 = {1,2,3,4,5};
	int[] arr2 = {6,7,8,9,10};
	
	int[] mergeArray = new int[arr1.length+arr2.length];
 	
	for(int i=0; i<arr1.length;i++) {
		mergeArray[i] = arr1[i];
	}
	
	//here i is for traversing the arr2 elements
	//here j is for traversing the merge array elements
	for(int i=0,j=arr1.length;j<(arr1.length+arr2.length);j++,i++) {
		mergeArray[j] = arr2[i]; 
	}
	
	System.out.println("array 1 elements:-"+Arrays.toString(arr1));
	System.out.println("array 2 elements:-"+Arrays.toString(arr2));
	System.out.println("merged array elements:-"+Arrays.toString(mergeArray));
	
	}
}

op:-
array 1 elements:-[1, 2, 3, 4, 5]
array 2 elements:-[6, 7, 8, 9, 10]
merged array elements:-[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

// using System.arraycopy method

package javatpoint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;


public class Student{
	public static void main(String[] args) {
	
	String[] arr1 = {"hava","kava","thava"};
	String[] arr2 = {"pova","sova"};
	
	String[] newArr = new String[arr1.length+arr2.length];
	
	System.arraycopy(arr1, 0, newArr, 0, arr1.length);
	
	System.arraycopy(arr2, 0, newArr, arr1.length, arr2.length);
	
	System.out.println("array 1 elements:- "+Arrays.toString(arr1));
	System.out.println("array 2 elements:- "+Arrays.toString(arr2));
	System.out.println("merged array elements:- "+Arrays.toString(newArr));
	
	}
}

op:-
array 1 elements:- [hava, kava, thava]
array 2 elements:- [pova, sova]
merged array elements:- [hava, kava, thava, pova, sova]

//10. program to sort 2 merged array

sol] //using predefined method
package javatpoint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;


public class Student{
	public static void main(String[] args) {
	Scanner input = new Scanner(System.in);
	int[] arr1 = new int[5];
	int[] arr2 = new int[5];
	
	System.out.print("Enter elements for arr1: ");
	for(int i=0; i<arr1.length;i++) {
		arr1[i] = input.nextInt();
	}
	
	System.out.print("Enter elements for arr2: ");
	for(int i=0; i<arr1.length;i++) {
		arr2[i] = input.nextInt();
	}
	
	//2 user defined arrays of length 5 are ready
	System.out.println("arr1 elements= "+Arrays.toString(arr1));
	System.out.println("arr2 elements= "+Arrays.toString(arr2));
	
	//program to merge sort 2 arrays
	//new array to store two arrays
	int[] mergesortArray = new int[arr1.length+arr2.length];
	
	//copying arr1 elements to mergesortArray
	System.arraycopy(arr1,0,mergesortArray,0,arr1.length);
	//copying arr2 elements to mergesortArray
	System.arraycopy(arr2, 0,mergesortArray, arr1.length,arr2.length);
	
	//we use an inbuilt method to merge and sort to arrays
	Arrays.sort(mergesortArray);
	
	System.out.println("elements after merging and sorting:- "+Arrays.toString(mergesortArray));
	
	}
}

op:-
Enter elements for arr1: 34 22 56 12 78
Enter elements for arr2: 45 678 890 345 67
arr1 elements= [34, 22, 56, 12, 78]
arr2 elements= [45, 678, 890, 345, 67]
elements after merging and sorting:- [12, 22, 34, 45, 56, 67, 78, 345, 678, 890]

//11. To find the largest element in the array

sol]
package javatpoint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;


public class Student{
	public static void main(String[] args) {
		
		 //give a predefined array
		int[] arr = {-100,34,5,6,-90};
		
		//assume arr[0] is the largest
		int max = arr[0]; 
		
		//iterate through every element in the array
		for(int i=0;i<arr.length;i++) {
			//check if max is greater than all other elements in the array
			if(max<arr[i]) {
				//if not then the max is updated to new element in the array
				max = arr[i];
			}
		}
		
		System.out.println("The largest elements in the array is: "+max);
	}	
}

op:-
The largest elements in the array is: 34

// to find largest element in a user deifned array

sol]
package javatpoint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;


public class Student{
	public static void main(String[] args) {
	
	int[] array = userArray();
	System.out.println("The array elements are: "+Arrays.toString(array));
	//program to find the maximum in array
	int max = array[0];
	
	for(int i=0; i<array.length;i++) {
		if(max<array[i]) {
			max = array[i];
		}
	}
	
	System.out.print("The largest element in the array is: "+max);
	}
	
	static int[] userArray() {
		Scanner input = new Scanner(System.in);
		
		//enter the size of array
		System.out.print("Enter the size of array: ");
		int size = input.nextInt();
		
		int[] usearr = new int[size];
		
		//ask for elements to add in the array by user
		System.out.println("Enter the elements of the array: ");
		for(int i=0; i<usearr.length;i++) {
			usearr[i] = input.nextInt();
		}
		
		return usearr;
	}
}

op:-
Enter the size of array: 5
Enter the elements of the array: 
90 67 -22 189 4
The array elements are: [90, 67, -22, 189, 4]
The largest element in the array is: 189

//12. FInd the minimum element in the array

sol]
package javatpoint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;


public class Student{
	public static void main(String[] args) {
	
	int[] array = userArray();
	System.out.println("The array elements are: "+Arrays.toString(array));
	//program to find the minimum in array
	int min = array[0];
	
	for(int i=0; i<array.length;i++) {
		if(min>array[i]) {
			min = array[i];
		}
	}
	
	System.out.print("The smallest element in the array is: "+min);
	}
	
	static int[] userArray() {
		Scanner input = new Scanner(System.in);
		
		//enter the size of array
		System.out.print("Enter the size of array: ");
		int size = input.nextInt();
		
		int[] usearr = new int[size];
		
		//ask for elements to add in the array by user
		System.out.println("Enter the elements of the array: ");
		for(int i=0; i<usearr.length;i++) {
			usearr[i] = input.nextInt();
		}
		
		return usearr;
	}
}

op:- 
Enter the size of array: 5
Enter the elements of the array: 
-1 -23 98 76 -100
The array elements are: [-1, -23, 98, 76, -100]
The samllest element in the array is: -100

//13. second largest in array

sol]
package javatpoint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;


public class Student{
	public static void main(String[] args) {
	
		Scanner input = new Scanner(System.in);
		
		int n = 0;
		int[] arr = null;
		
		System.out.println("Enter the array size: ");
		n = input.nextInt();
		
		arr = new int[n];
		System.out.println("Enter the array elements: ");
		for(int i=0; i<arr.length;i++) {
			arr[i] = input.nextInt();
		}
		
		System.out.println("The second largest in the array is: "+secondLargest(arr));
			
	}
	
	static int secondLargest(int[] arr) {
		
		//declare variables
		int fmax = 0;
		int smax = 0;
		
		//declare first element
		fmax = arr[0];
		smax = arr[0];
		
		/*draw back:- if i try to give an array of length 5 with elements
					98 34 7 6 38, it does'nt work and return smax value as 98 only
					because of the else if loop, maybe we should give additional rules
					And also duplicate elements wont work, so we need to add
					another rule to overcome this predicament.
		*/
		for(int i=1;i<arr.length;i++) {
			if(fmax<arr[i]) {
				smax = fmax;
				fmax = arr[i];
			}else if(smax<arr[i]){
				smax = arr[i];
			}
		}
		return smax;
	}
}



op:- 
Enter the array size: 
5
Enter the array elements: 
-10
2
3
4
5
The second largest in the array is: 4

//14. how to sort an array in java

sol]
package javatpoint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;


public class Student{
	public static void main(String[] args) {
		//inbuilt method to sort
		int[] arr = {12,13,14,5,6};
		System.out.println("Arrays befor sort:"+Arrays.toString(arr));
		Arrays.sort(arr);
		System.out.println("Arrays after sort: "+Arrays.toString(arr));
	}
	
}

op:-
Arrays befor sort:[12, 13, 14, 5, 6]
Arrays after sort: [5, 6, 12, 13, 14]

//manual sorting using 2 loops

package javatpoint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;


public class Student{
	public static void main(String[] args) {
		
		int[] arr = {12,13,14,5,6};
		int temp = 0;
		System.out.println("Arrays before3 sort:"+Arrays.toString(arr));
		for(int i=0;i<arr.length;i++) {
			for(int j=i+1;j<arr.length;j++) {
			if(arr[i]>arr[j]) {
				temp = arr[i];
				arr[i] = arr[j];
				arr[j] = temp;
			}
			}
		}
		System.out.println("Arrays after sort: "+Arrays.toString(arr));
	}
	
}
/*internal working from loops
 * start - 1st loop - [12,13,14,5,6]
 * 12>13[F] 12>14[F] 12>5[T] - [5,13,14,12,6] - 12>6[T] - [5,13,14,6,12] - loop end
 * 2nd loop - [5,13,14,6,12]
 * 13>14[F] 13>6[T] - [5,6,14,13,12] - 13>12[T] - [5,6,14,12,13] - loop end
 * 3rd loop - [5,6,14,12,13]
 * 14>12[T] - [5,6,12,14,13] - 14>13[T] -[5,6,12,13,14] - loop end - end 
 */

op:-
Arrays before sort:[12, 13, 14, 5, 6]
Arrays after sort: [5, 6, 12, 13, 14]

//15] reverse an array in java

sol] //using while loop
package javatpoint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;


public class Student{
	public static void main(String[] args) {
		
	int[] realArr = {1,23,45,67,8};
	System.out.println("original array:- "+Arrays.toString(reverseArr));
	int length = realArr.length;
	int[] reverseArr = new int[length];
	
	int i=0;
	int j = length-1;
	
	while(i<length) {
		reverseArr[j] = realArr[i];
		i++;
		j--;
	}
	
	System.out.println("reverse array:- "+Arrays.toString(reverseArr));

	}
	
}

op:-
original array:- [1, 23, 45, 67, 8]
reverse array:- [8, 67, 45, 23, 1]

//using for loop

package javatpoint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;


public class Student{
	public static void main(String[] args) {
		
	int[] realArr = {1,23,45,67,8};
	System.out.println("original array:- "+ Arrays.toString(realArr));
	int length = realArr.length;
	int[] reverseArr = new int[length];
	int i;
	int j;
	for(i=0,j=length-1;i<length;i++,j--) {
		reverseArr[j] = realArr[i];
	}
	
	System.out.println("original array:- "+Arrays.toString(reverseArr));
	}
	
}


op:-
original array:- [1, 23, 45, 67, 8]
reverse array:- [8, 67, 45, 23, 1]


//16] GCD of 2 numbers of array using recursion

sol]
package javatpoint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;


public class Student{
	public static void main(String[] args) {
	
	//initializing the elements
	int size = 0;
	int[] arr = null;
	int result = 0;
	
	Scanner input = new Scanner(System.in);
	
	//take size input from user
	System.out.println("Enter the size of the array: ");
	size = input.nextInt();
	
	//initialize the new array with the new size
	arr = new int[size];
	
	//input elements of the array
	System.out.println("Enter the elements of the array: ");
	for(int i=0;i<arr.length;i++) {
		arr[i] = input.nextInt();
	}
	
	//initialize the result as first element of the array
	result = arr[0];
	
	for(int i=0;i<arr.length;i++) {
		result = gcd(result,arr[i]);
	}
	
	System.out.println("The GCD is :"+result);

	}	
	
	//recursion method
	static int gcd(int num1, int num2) {
		while(num1 != num2) {
			if(num1>num2) {
				num1 = num1-num2;
			}if(num2>num1) {
				num2 = num2- num1;
			}
		}
		return num1;
	}
}



op:-
Enter the size of the array: 
3
Enter the elements of the array: 
10 15 25
The GCD is :5

//17] find element using linear search

sol]
package javatpoint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;


public class Student{
	public static void main(String[] args) {
		
		Scanner input = new Scanner(System.in);
		
		int[] arr = {10,2,34,56,7};
		
		System.out.println("Input the element to find in the array: ");
		int searchElement = input.nextInt();
		
		int index = searchIndex(arr,searchElement);
		
		if(index == -1) {
			System.out.println(searchElement+" does not exists in array ");
		}else {
			System.out.println(searchElement+" exists in the index: "+index);
		}
	}
	
	static int searchIndex(int[] arr,int element) {
		for(int i=0;i<arr.length;i++) {
			if(element == arr[i]) {
				return i;
			}
		}return -1;
	}
}


op:-
Input the element to find in the array: 
9
9 does not exists in array: 

//find element using improved linear search

sol]
package javatpoint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;


public class Student{
	public static void main(String[] args) {
		
		Scanner input = new Scanner(System.in);
		
		int[] arr = {10,2,34,56,7};
		
		System.out.println("Input the element to find in the array: ");
		int searchElement = input.nextInt();
		
		int index = searchIndex(arr,searchElement);
		
		if(index == -1) {
			System.out.println(searchElement+" does not exists in array ");
		}else {
			System.out.println(searchElement+" exists in the index: "+index);
		}
	}
	
	static int searchIndex(int[] arr,int element) {
		int n=arr.length;
		for(int i=0,j=n-1;i<=n/2;i++,j--) {
			if(element == arr[i]) {
				return i;
			}if(element == arr[j]) {
				return j;
			}
		}return -1;
	}
}


op:-
Input the element to find in the array: 
2
2 exists in the index: 1

//18] binary search in java
//in binary search, we take the array, find the mid value, check if mid value is equal to the
key value. if it is equal return 1, else, find the lowest to mid value and compare the key, if
true then return 1, else, compare mid to highest and if it gives the key element then return 1,
if no value is right retun -1.

sol]
package javatpoint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;


public class Student{
	public static void main(String[] args) {
	Scanner input = new Scanner(System.in);
	//for binary search, we need to have an sorted array in ascending order
	//the array
	int[] arr = {10,20,30,40,50,60,70,80,90,100};
	
	System.out.println("Enter the key to check if it exists");
	int key = input.nextInt(); //the value to find
	
	//index in which the value lies
	int index = binarySearch(arr,0,arr.length-1,key);
	
	if(index == -1) {
		System.out.println(key+" does not exist");
	}else {
		System.out.println(key+" exists");
	}
	
	}
	
	static int binarySearch(int[] arr,int low,int high,int key) {
		if (high>=low) {
			
			//find mid index value of the array
			int mid = low+(high-low)/2; //to find mid value
			
			//check if mid value equals the key
			if(arr[mid]==key) {
				return mid;
			}
			
			//check if the mid element is smaller than key
			if(arr[mid]>key) {
				return binarySearch(arr,low,mid-1,key);
			}else {
				return binarySearch(arr,mid+1,high,key);
			}
		}
		return -1;
	}
}

op:-

Enter the key to check if it exists
90
90 exists

//19] Remove Duplicates From Array in Java

sol] 
package javatpoint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;


public class Student{
	public static void main(String[] args) {
		int[] arr = {10,10,20,30,30,40,50,50};
		int[] dupeArr = duplicateRemover(arr);
		
		System.out.println("Original array: "+Arrays.toString(arr));
		System.out.println("no duplicate array: "+Arrays.toString(dupeArr));
			
	}
	static int[] duplicateRemover(int[] arr) {
		int j=0; //index without duplicates
		int lastIndex = arr.length-1;
		
		for(int i=0;i<lastIndex;i++) {
			if(arr[i] != arr[i+1]) {
				arr[j++] = arr[i];
			}
		}
		
		if(arr[j] != arr[lastIndex]) {
			arr[j++] = arr[lastIndex];
		}
		
		return Arrays.copyOf(arr,j);
	}

}

op:-
Original array: [10, 20, 30, 40, 50, 40, 50, 50]
no duplicate array: [10, 20, 30, 40, 50]

//20] 

