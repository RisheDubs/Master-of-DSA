 //  beginning of DSA
// CHAPTER-1: ARRAYS

//SPL NOTE: In java primitives are stored in stack memory only, but all the other object types such as String type, Array type are stored in heap memory.


//1] 										What is array, What are its components

package javatpoint;

import java.util.Scanner;

public class Student{
	public static void main(String[] args) {
		//Arrays - Array is a collection of dataTypes
		
		/*syntax
		* datatype[] variable_name = new datatype[size];
		*/
		
		//eg:- store 5 roll numbers:
		int[] rnos = new int[5];
		/*
		 * Certain rules about arrays:
		 * 1. The dataype(int[]) represent the types of data being stored in the array.
		 * 2. All the type of the data in the array should be same.
		 * 	eg:- int[] numbers = {22,33,'c',45}; - gives error!
		 * 3. Array objects are stored in heap(Not just array, but all objects... But for now we can consider this).
		 * 4. Heap objects are not continous.[Continous here means that, in c++ the array are stored in the ram, one-by-one in order(eg:-1,2,3,4). But in java, it is not proven to be stored continous. eg:-)It may be) 1,3,2,4.
		 * 5. Dynamic memory allocation takes place during run time.
		 *  hence, java is not continous, and it depends on JVM(heap,stack memory depends on this).
		 */
		
		//or directly3
		int[] rnos2 = {22,34,56,78,90};
		/*
		 * What is in the above codes:
		 * 1.a. int[] ros; - (declaration) of array. ros is getting defined in a stack.
		 * 	 b. ros = new int[5] - (initialisation) actually object is being created in the memory (heap).
		 *   c.rnos is the reference variable.
		 * 
		 * 2.a.int[] arr - happens at compiletime
		 * 	 b.new int[5] - happens at run time. This is called DYnamic memory allocation.	
		 * 
		 * 3. print(arr[2]);  gives value 56. This is called Index of an array.
		 * 
		 * 4. new - is used to create an object.[for user defined input).
		 */
	}	
}

//2]												 what is NULL, basic input program using array.

package javatpoint;

import java.util.Scanner;

public class Student{
	public static void main(String[] args) {
		//eg1:- demonstration of using an array with int data type
		int[] ros;//reference variable
		ros = new int[5];//creates an array [0,0,0,0,0]
		
		System.out.println(ros[1]);// return value, 0
		
		//eg2:- demonstration of using an array with String data type
		String arr[] = new String[5];
		
		System.out.println(arr[3]);// returns NULL.
		
		/* What is NULL?
		 * NULL is not a keyword, but a Literal(,special value). It cannot be assigned to primitives such as int. 
		 * Only to non-primitives it can be given. It is a by default value of reference variables.
		 */ 
		
	}	
	
}

//Excersise:- Basic program to add values.

sol] package javatpoint;

import java.util.Scanner;

public class Student{
	public static void main(String[] args) {
//array of primitives
		int[] roll = new int[4];
		
		roll[0] = 21;
		roll[1] = 34;
		roll[2] = 65;
		roll[3] = 87;
		
		System.out.println(roll[3]);

  // if we try to print roll[4] - we get an out of bound error.
	}	
	
}

// Since we used only 4 as length we inputed manually. But inorder to store about 100 values, we can use for loop
// The above program using for-loop can be shown like this

package javatpoint;

import java.util.Arrays;
import java.util.Scanner;

public class Student{
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);
		
		int[] arr = new int[5];
		
		System.out.println("Enter the numbers to be added in the array: ");
		for(int i=0;i<arr.length;i++) { //Here arr.length, is used to represent the arrays length in case we don't know the arrays length.
			arr[i] = input.nextInt();
		}
		
	//method 1 - for loop
		System.out.println("The final array is:  ");
		for(int i=0; i<arr.length;i++) {
			System.out.print(arr[i]+" ");

		}
		
		//The above for loop can be enhance by for each loop
		
	//method 2 - for-each loop 
		for(int num : arr) {//for every element in array, print element
			System.out.print(num+" ");//here num represents element of the array.
		}
		
	//method 3 - toString() method
		System.out.println(Arrays.toString(arr));
	}		
}

//the above example was for primitive data types
//for non primitive data types the example below is illustarted

package javatpoint;

import java.util.Arrays;
import java.util.Scanner;

public class Student{
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);
		
		//array of objects
		String[] str = new String[4];
		System.out.println("Enter the strings with space between each: ");
		for(int i = 0;i<str.length;i++) {
			str[i] = input.next();
		}
		System.out.println(Arrays.toString(str));
	}	
	
}

op: - 
Enter the strings with space between each: 
aa bb cc dd
[aa, bb, cc, dd]

//3] Mutability of arrays in java

package javatpoint;

import java.util.Arrays;
import java.util.Scanner;

public class Student{
	/*mutable nature in java:- 
	 * 1.Strings are immutable in java.
	 * 2.But, Arrays are mutable in java.
	 */
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);
		int[] num = {1,23,4,56};
		System.out.println(Arrays.toString(num));
		change(num);
		System.out.println(Arrays.toString(num));
	}
	static void change(int[] arr) {
		arr[0] = 99; 
	}
}

output:-
[1, 23, 4, 56]
[99, 23, 4, 56]

//3]												2d arrays

package javatpoint;

import java.lang.reflect.Array;
import java.util.Arrays;
import java.util.Scanner;

public class Student{
	/* 2D arrays in java
	 * 1. They are usually represented in a matrix type.
	 * eg:-	1 2 3
	 *      4 5 6
	 *      7 8 9
	 */
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);
		
//		One way of representing a 2d array
//		int[][] arr = new int[3][]; // You don't need to add column value

//      System.out.println(arr.length); - will give the length of row, and not the column
		
//		another way of representing an 2d array
//        int[][]	arr = {
//        		{1,2,3}, //0th index
//        		{4,5}, //1st index
//        		{6,7,8,9}  //3rd index
//        };
		
		int[][] arr = new int[3][3];
        
        //input
		 System.out.println("Enter the elements to be in the matrix: ");
		//for each rows
        for(int row=0;row<arr.length;row++) {
        //for each column
        	for(int col=0;col<arr[row].length;col++) { //arr[row].length, is basically the size of the row
        		arr[row][col] = input.nextInt();
        	}
        }
        
        //output
        
        //method 1: basic method
//        for(int row=0 ; row<arr.length;row++) {
//        	for(int col=0;col<arr[row].length;col++) {
//        		System.out.print(arr[row][col]+" ");
//        	}
//        	System.out.println();
//        }
        
        //method 2: Arrays.toString method
//        for(int row=0;row<arr.length;row++) {
//        	System.out.println(Arrays.toString(arr[row]));
//        }
        
        //method 3: Enhanced for loop
        for(int[] a: arr) { //every single element in the array is an array, so we use, int[] a=arr
        	System.out.println(Arrays.toString(a));
        }
   }
		
}

output:
Enter the elements to be in the matrix: 
1 2 3 45 6 7 89 0 9
[1, 2, 3]
[45, 6, 7]
[89, 0, 9]

//4]											Array List

package javatpoint;

import java.util.ArrayList;


public class Student{
	
	/* Array List:-
	 * If a programmer doesn't know the size of an array, then we use array list
	 * 
	 * Syntax:-
	 * ArrayList<Integer>list = new ArrayList<>(number);//here number is the initial capacity.
	 */
	
	public static void main(String[] args) {
		
		ArrayList<Integer> list = new ArrayList<>(5);
		
		//add elements in an empty array
		list.add(56);
		list.add(65);
		list.add(76);
		list.add(906);
		list.add(589);
		list.add(345);
		
		//to check if the element exists in the array(return true or false)
		System.out.println(list.contains(56));
		
		//to update or change an element in the array
		list.set(0, 99); //list.set(index position, new element to update);
		
		//To remove an element
		list.remove(2); //removes the element in index 2, 76
		
		//print the elements of the array
		System.out.println(list);
   }
		
}

// more ArrayList

package javatpoint;

import java.util.ArrayList;
import java.util.Scanner;

public class Student{
	
	/* Few things to know about arrayList
	 * 1. Size of ArrayList is fixed internally.
	 * 2. If ArrayList fills by some amount, then:-
	 * 	  a. It will create a new arrayLisr of size double than the previous arrayList.(eg:- when we add elements (1,2,3) to an empty arrayList, and if we want to add more elements. It creates a new and bigger arrayList that can hold more number.(1,2,3,4,5).
	 * 	  b. When that happens, old elements get copied to the new arrayList.
	 */
	
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);
		ArrayList<ArrayList<Integer>> list = new ArrayList<>();
		
		//initialize the size of array list
		for(int i=0; i<3;i++) { //if we do not initialize the arrayList elements, we will get an error.
			list.add(new ArrayList<>());
		}
		
		//add elements to the array list
		for(int i=0; i<3; i++) {
			for(int j=0;j<3;j++) {
				list.get(i).add(input.nextInt());//list.get(i), means get the list element at index i(0,1,2,etc).
			}
		}
		
		System.out.println(list);
		
	}
		
}

//					excersise

//1] program to swap values in an array

sol]
package javatpoint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

public class Student{
	
	public static void main(String[] args) {
		
		int[] arr = {1,2,3,4};
		swap(arr,0,1);
		
		System.out.println(Arrays.toString(arr));
	}
	
	static void swap(int[] arr,int index1, int index2 ) {
		int temp = arr[index1];
		arr[index1] = arr[index2];
		arr[index2]= temp;
	}
		
}


