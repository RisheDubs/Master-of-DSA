//Methods in JAVA

//1. Use methods to print sum of numbers 5 times.
package javatpoint;

import java.util.Scanner;

public class Student{
	public static void main(String[] args) {
		sum();
		sum();
		sum();
		sum();
		sum();
	}
	/*A method is like function in java, it helps us to avoid repetiton of code thus saving the time 
  *needed for coding 1000 of same lines of code.*/
	//Changes commited to the function reflects on the main method as well.
  static void sum() {
		Scanner input = new Scanner(System.in);
		int num1,num2,sum;
		System.out.print("Enter num1: ");
		num1 = input.nextInt();
		System.out.print("Enter num2: ");
		num2 = input.nextInt();
		sum = num1+num2;
		System.out.println("The sum is: "+sum);
		
	}
}

//2.Return an integer with return type int.

package javatpoint;

import java.util.Scanner;

public class Student{
	public static void main(String[] args) {
		int ans = sum2();
		System.out.println("The sum is: "+ans);
	}
	static int sum2(){
		Scanner input = new Scanner(System.in);
		int num1,num2,sum;
		System.out.print("enter num1: ");
		num1 = input.nextInt();
		System.out.print("enter num1: ");
		num2 = input.nextInt();
		sum = num1+num2;
		return sum;/*If a return statement is mention in a function, it basically means the function is 
    *over and it will return a value to the main function*/
		
		
	}
}


//3. Return a string

package javatpoint;

import java.util.Scanner;

public class Student{
	public static void main(String[] args) {
		String ans = name();
		System.out.println("The name is, "+ans);
	}
	static String name(){
		Scanner input = new Scanner(System.in);
		String name;
		System.out.print("enter a name: ");
		name = input.next();
		return name; 
		
		
	}
}


//4. Passing in parameters 

package javatpoint;

import java.util.Scanner;

public class Student{
	public static void main(String[] args) {
		int ans = sum(1,2); //giving a:1, b:2
		System.out.println("The sum is: "+ans);
	}
	
	static int sum(int a,int b) { //parameters given
		int sum = a+b;
		return sum;
	}
	

}

//5. SCOPE
//There are 3 types of scopes

package javatpoint;

import java.util.Scanner;

public class Student{
	public static void main (String[] args) {
	//scope - means where we can access our variables
	/*Basically - Anything that is initialized outside a block, can be used inside another block.
  *But anything that is initialized inside a block cannot be used outside */
	int a = 10; /* IMP:- Whenever we use int(or any dataType before a variable, That is called 
  *INITIALIZING. After that if we use just the variable to change the value stored inside, 
  *it is called updating. Eg:- int a=100(initializing), a=10(updating) */
	int b = 20;
	
	{
		//1]This is a block scope
		//int a = 78; shows error that its already initialized
		a = 100; //it rewrites/updates the previous a value. Hence in (1). It will print 100
		int c=90;//values initialized in the block will remain inside the block
	}
	System.out.println(a);//(1)
	//System.out.println(c); //Shows an error, because it is unable to reach c inside the block
	
	//2]scoping in for loops
		for(int i=0; i<=4;i++) {
			System.out.println("hello");
		}
		//System.out.println(i); //can't be defined outside the for loop block, will show error.
	
	}
	
	
	
	static void random(int marks) {
		//3]scope of a method:- this change will only be valid in this function scope only
		int num = 67;
		System.out.println(num);
		
	}
	
	
}


//6. Shadowing

package javatpoint;

import java.util.Scanner;

public class Student{
	static int x= 80;//gets shadowed at line 11
	//Shadowing - using 2 variables with the same name within the scope that overlaps
	public static void main(String[] args) {
		System.out.println(x);//80
		/* int x;//initializing a variable
		*  System.out.println(x); //Throws an error. Scope will begin when the value is initialized
		 * x=10;//declaring the variable
		*/
		int x = 40;
		System.out.println(x);//40, shadowing the previous x value
		fun();//80
	}
	static void fun() {
		System.out.println(x);
	}
}


//6. Variable arguments(varargs)

package javatpoint;

import java.util.Arrays;
import java.util.Scanner;

public class Student{
	//variable length arguments 
	public static void main(String[] args) {
		fun(51, 55, 55, 56, 58, 36, 97);//these are known as Variable length arguments
	}
	
	static void fun(int ...v) {//if you don't know how many integers you are passing, do "int ...v", it internally takes it as a array of integers. Same can be done for char and strings as well.
		System.out.println(Arrays.toString(v));
	}
}


//7. Method overloading

package javatpoint;

import java.util.Arrays;
import java.util.Scanner;

public class Student{
	//Method overloading - takes place if 2 or more methods with same name exist, but with different arguments.
	public static void main(String[] args) {
		//eg:1-same function different data types
		fun(1);
		fun("rishe");
		//eg:2-same function different parameters
		int add = sum(2,3);
		int add1 = sum(2,3,4);
		System.out.println(add);
		System.out.println(add1);
		//eg:3- If you don't give any data, it will show error.
		//fun();// it cannot be empty
	
	//eg1
	}
	static void fun(int roll) {
		System.out.println(roll);
	}
	static void fun(String name) {
		System.out.println(name);
	}
	//eg2
	static int sum(int a, int b) {
		return a+b;
	}
	static int sum(int a,int b,int c) {
		return a+b+c;
	}
}



//8. to check if a number is armstrong or not

package javatpoint;

import java.util.Arrays;
import java.util.Scanner;

public class Student{
	
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);
		System.out.println("enter a number to check whether armstrong or not: ");
		int number = input.nextInt();
		System.out.println(isArmstrong(number));//function call
	}
	
	//function start
	static boolean isArmstrong(int number) {
		int original = number;
		int sum = 0;
		
		while(number>0) {
			int reminder = number%10;
			number = number/10;
			sum = sum+(reminder*reminder*reminder);
		}
		return original == sum;
		/* The above code is a short form of
		 * 
		 * if(original == sum){
		 * 	return true;
		 * }
		 * else{
		 * 	return false;
		 * }
		 * 
		 * the above code does this efficiently by giving tru is it is same, or false if it is not same.
		 */
	}//function end
}
































