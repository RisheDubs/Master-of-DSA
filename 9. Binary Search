
/* Binary Search
*
* What is binary search?
*   A searching algorithm used only on sorted arrays. It states that:- (1) Find the middle element in the 
* sorted array, (2) if target element is less than the middle element, search in the left side. Else,
* search in the right hand side of the array.(3) If middle element is the target element, then that 
* concludes the search.[NOTE:- Step 2 may be repeated, and Step 3 will be checked each time that happens]
* if Start becomes greater than end - Element not found
*
*
* Why do we use Binary Search?
    - The best case for a binary search is, finding the element being searched for in first search, which 
    is the middle element. O(1) - Best case for Binary Search 
    - The worst case for binary search is when comparison is either not found, or is found at the last 
    search. {log[base 2]N} ie., O(logN) - worst case for Binary Search
* Hence, if we have to make 1,000,000 comparisons, with lenear search we will have to search 1 million
* times, but when it comes to Binary Search, It only takes 20 Comparisons.

// Binary search implementation through code

sol] // we assume an ascending order array for this
package javatpoint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;


public class Student{
	public static void main(String[] args) {
		int[] arr = {-23,-12,-4,0,23,45,67,89,100};
		int target = -23;
		int ans = binarySearch(arr,target);
		System.out.println(ans);
	}
	//this search is for ascending order array
	static int binarySearch(int[] arr,int target) {
		
		int start = 0;
		int end = arr.length-1;
		
		while(start <= end) {
		//	To find middle element
		//	int mid = (start+end)/2 // might be possible that(start+end) exceed the range of integer in java  
		//  So we use,
			int middle = start+(end-start)/2;
			
			if(target < arr[middle]) { // search left side
				end = middle - 1;
			}else if(target > arr[middle]) { //search right side
				start = middle + 1;
			}else {
				//answer found as the middle value
				return middle;
			}
		}
		//if none of the return have worked, then.
		return -1;//if target not found
	}
	
	
}


op:-

0

/* NOTE:-  For the above program we assumed a sorted array, we are going to see how to use binary search on 
*  unsorted array 
*/

//Q1] find the target element in a descending order array, using binary search

sol]
package javatpoint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;


public class Student{
	public static void main(String[] args) {
		int[] arr = {78,67,54,43,32,22,20,17,8,3,1};
		int target = 54;
		int ans = binarySearch(arr,target);
		System.out.println(ans);
	}
	//this search is for ascending order array
	static int binarySearch(int[] arr,int target) {
		
		int start = 0; //78
		int end = arr.length-1; //1
		
		while(start<=end) {
			int middle = start + (end-start)/2; //22
//MAJOR NOTE:- There is difference between {(start+end)/2} and {start + (end-start)/2}, for the later, only second term in bracket is divided by 2, then it is added to start. for the former both are divided by 2.			
			if(target>arr[middle]) {
				end = middle-1; 
			}else if(target<arr[middle]) {
				start = middle+1;
			}else {
				return middle;
			}
		}
		
		return -1;
		
	}
}


op:- 
2


// Order Agonistic binary search
/* 
*  Means, you are given a sorted array, but dont know whether it is ascending or descending order array.
*  Say, suppose we are given an array - [23,13,11,10,5,2,1] - we can compare the 0th and 1st element and
*  conclude that, it is in descending order. 
*  But, what if the array is [2(f),2,2,2,4,56(s)] - in such case we can find out by comparing first and last element
*  So, we can say that - 
*	if(start(s) > first(f)) --> it is in descending order(increasing order)
*	else                    --> it is in ascending order(decreasing order)
* So, in conclusion. In order agonistic binary search, we first are given with an sorted array, but we dont
* know if it is in ascending or descending. Using the formula above we figure out and apply the method to
* find the target elements index value. These are the 3 steps.
*/

//example

package javatpoint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;


public class Student{
	public static void main(String[] args) {
		//asc order array
//		int[] arr = {-18, -12, -4, 0, 2, 3, 4, 15, 16, 18, 22, 45, 89};
		
		//dsc order array
		int[] arr = {99, 54, 44, 33, 22, 11, 5, 2};
		
		int target = 22;
		int ans = orderAgnosticBS(arr,target);
		System.out.println(ans);
	}
	//order agnostic binary search
	static int orderAgnosticBS(int[] arr, int target) {
		
		int start = 0;
		int end = arr.length - 1;
		
		//find whether the array is sorted in ascending or descending order
		
		boolean isAsc = arr[start] < arr[end];
		/* The below block of code can be optimised above
		  boolean isAsc;
		if(arr[start]<arr[end]) {
			isAsc = true;
		}else {
			isAsc = false;
		} 
		*/
		
		while(start <= end) {
			int middle = start + (end-start)/2;
			
			if(arr[middle] == target) {
				return middle;
			}
			
			if(isAsc) {
				if(target<arr[middle]) {
					end = middle - 1;
				}else{   // target>arr[middle]
					start = middle + 1;
				}
			}else {      //isAsc = false
				if(target>arr[middle]) {
					end = middle - 1;
				}else {  // target<arr[middle]
					start = middle + 1;
				}
			}
		}	
		return -1;
	}
}

op:- 

4

