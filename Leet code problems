Arrays

1] [https://leetcode.com/problems/build-array-from-permutation/description/] - Given a zero-based permutation nums (0-indexed), build an array ans of the same 
length where ans[i] = nums[nums[i]] for each 0 <= i < nums.length and return it.

A zero-based permutation nums is an array of distinct integers from 0 to nums.length - 1 (inclusive).

sol] 

/*
* Intuition
* We want to construct a new array 'ans' using the given 'nums' array such that
* ans[i] = nums[nums[i]] for all valid indices i.
* Approach
* 1. Initialize an empty array 'ans' with the same length as 'nums'.
* 2. Iterate through 'nums' from index 0 to the length of 'nums'.
* 3. For each index i, set ans[i] to nums[nums[i]].
* 4. Return the 'ans' array as the result.
* Complexity
* Time complexity:O(n)
*
* Space complexity:O(n)
*/
// Code
class Solution {
    public int[] buildArray(int[] nums) {
        int[] ans = new int[nums.length];
        
        for (int i = 0; i < nums.length; i++) {
            ans[i] = nums[nums[i]];
        }
        
        return ans;
    }

    public static void main(String[] args) {
        Solution sc = new Solution();
        int[] nums = {0, 2, 1, 5, 3, 4};
        int[] result = sc.buildArray(nums);
        
        for (int num : result) {
            System.out.print(num + " ");
        }
    }
}

op:-
Input
nums =
[0,2,1,5,3,4]
Output
[0,1,2,4,5,3]
Expected
[0,1,2,4,5,3]

2] [https://leetcode.com/problems/concatenation-of-array/description/] - Given an integer array nums of length n, you want to create an array ans of 
length 2n where ans[i] == nums[i] and ans[i + n] == nums[i] for 0 <= i < n (0-indexed).

Specifically, ans is the concatenation of two nums arrays.

Return the array ans.

sol]
/*
* Intuition :
*  The code aims to concatenate the given array nums with itself, forming a new array of length '2*len', where len is the length of the input array. 
*  In other words, the code duplicates each element in nums and appends it to the end of the array.
*
* Approach
*  Create a new integer array 'ans' of size '2*len', where 'len' is the length of the input array 'nums'.
*  Iterate over the elements of 'nums' using a for loop.
*  For each element at index 'i', assign 'nums[i]' to 'ans[i]' (copy the element).
*  Assign 'nums[i]' to 'ans[i+len]' (append the element to the end of the array).
*  Return the resulting array 'ans'.
* Complexity
*  Time complexity:
*   The code has a time complexity of O(n), where n is the length of the input array nums. The loop iterates over each element in nums exactly once.
*
*  Space complexity:
*   The code has a space complexity of O(n), where n is the length of the input array nums. The additional space is used to store the resulting array ans, 
*   which has a size of 2*len.
*/

//code:-

class Solution {
    public int[] getConcatenation(int[] nums) {
        int len = nums.length;
        int[] ans = new int[2*len];
        for(int i = 0; i < len; i++){
            ans[i] = nums[i];
            ans[i+len] = nums[i];
        }
        System.gc();
        return ans;
    }
}

op:-
nums =
[1,2,1]
Output
[1,2,1,1,2,1]
Expected
[1,2,1,1,2,1]

3] Richest customer wealth - You are given an m x n integer grid accounts where accounts[i][j] is the amount of money the i​​​​​​​​​​​th​​​​ customer has in the j​​​​​​​​​​​th​​​​ bank. 
Return the wealth that the richest customer has.

A customer's wealth is the amount of money they have in all their bank accounts. The richest customer is the customer that has the maximum wealth.

sol]
/*
* Intuition :
*  Brute force method
* 
* Approach:-
*
*  Find the sum of each row.
*  if the sum is greater then the previous? update new sum : moveon
*  return the greatest sum
*
*/

sol] 

class Solution {
    public int maximumWealth(int[][] accounts) {
        int result = 0;
        for(int customer=0;customer<accounts.length;customer++){
            int sum = 0;
            for(int account=0;account<accounts[customer].length;account++){
                sum = sum + accounts[customer][account];
            }
            result = Math.max(sum,result);
            /*
            if(sum>result){
                result = sum;
            }
            */
        }
        return result;
    }
}

op:-

Input
accounts =
[[1,2,3],[3,2,1]]
Output
6
Expected
6

4] Shuffle the array [URL -  https://leetcode.com/problems/shuffle-the-array/]

Given the array nums consisting of 2n elements in the form [x1,x2,...,xn,y1,y2,...,yn]. 
Return the array in the form [x1,y1,x2,y2,...,xn,yn].

sol] 
// the first half n elements are x and the second half n elements are y
// we can iterate n times and push nums[i] and nums[i + n]
// since the distance for each x_i and y_i is just `n`

class Solution {
    public int[] shuffle(int[] nums, int n) {
        int[] ans = new int[2*n]; //assign new answer array

        for(int i=0; i<n; i++){
            ans[2*i] = nums[i]; //x values are found
            ans[2*i + 1] = nums[i+n]; //y values are found 
        }
        return ans; //order the x and y elements and return to ans array
    }
}

op:-

nums =
[2,5,1,3,4,7]
n =
3
Output
[2,3,5,4,1,7]
Expected
[2,3,5,4,1,7]

5] 



