******************* Notes avilable ***************************
-vid link:- [https://www.youtube.com/watch?v=JfinxytTYFQ&t=1269s]

1] Missing Number [URL:- https://leetcode.com/problems/missing-number/]

sol] //Amazon asked question

class Solution {
    public int missingNumber(int[] nums) {
       int i = 0;
       int n = nums.length;
       while(i < n){
           int correctIndex = nums[i];
           //swap only if, element{here, nums[i]} less than length and element not equal to correct index.
           if(nums[i] < n && nums[i] != nums[correctIndex]){
               int temp = nums[i];
               nums[i] = nums[correctIndex];
               nums[correctIndex] = temp;
           }else{
               i++;
           }
       }
       //search for first missing number
       //this searches for all the elements within the range of 0 to n(not n)
       for(i=0; i<n ; i++){
           if(nums[i] != i){
               return i;
           }
       }
       
       //return the length of nums, if the target is the last element of array
       return n; 
    }
}

op:-
nums =
[3,0,1]

Output
2


2] Find All Numbers Disappeared in an Array [URL:- ]https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array/description/

sol] 
class Solution {
    public List<Integer> findDisappearedNumbers(int[] nums) {
        int n = nums.length;
        int i = 0;

        List<Integer> ans = new ArrayList<>();

        //same ordinary cyclic sort
        while(i < n){
           int correctIndex = nums[i] - 1;
           if(nums[i] != nums[correctIndex]){
               int temp = nums[i];
               nums[i] = nums[correctIndex];
               nums[correctIndex] = temp;
           }else{
               i++;
           } 
        }

        //the only change is this.
        //find the missing numbers
        for(int index = 0; index < n ; index++){
            if(nums[index] != index+1){
                ans.add(index + 1);
            }
        }

        return ans;

    }
}

op:-
nums =
[4,3,2,7,8,2,3,1]

Output
[5,6]

3] Find the Duplicate Number [URL:- https://leetcode.com/problems/find-the-duplicate-number/description/]

sol] //Amazon question
class Solution {
    public int findDuplicate(int[] nums) {

        int i = 0;
        while(i < nums.length){
            if(nums[i] != i+1){
                
                int correctIndex = nums[i] - 1;
            
                if(nums[i] != nums[correctIndex]){
                    int temp = nums[i];
                    nums[i] = nums[correctIndex];
                    nums[correctIndex] = temp;

                }else{
                    return nums[i];
                }
            }else{
                i++;
            }

        }
        return -1;
    }
}
        

op:- 

nums =
[1,3,4,2,2]

Output
2

4] Find All Duplicates in an Array [URL:- https://leetcode.com/problems/find-all-duplicates-in-an-array/description/]

sol]
class Solution {
    public List<Integer> findDuplicates(int[] nums) {
      
       List<Integer> arr = new ArrayList<>();

       int i = 0;
       while(i < nums.length){

        int correctIndex = nums[i] - 1;
           
        if(nums[i] != nums[correctIndex]){
            int temp = nums[i];
            nums[i] = nums[correctIndex];
            nums[correctIndex] = temp;   
            }else{
               i++;
            }
        }

        for(int j=0 ; j < nums.length ; j++){
            if(nums[j] != j + 1){
                arr.add(nums[j]);
            }
        } 
        return arr; 
    }
           
}


op:-
nums =
[4,3,2,7,8,2,3,1]

Output
[3,2]

5] Set Mismatch [URL:- https://leetcode.com/problems/set-mismatch/description/]

sol]
class Solution {
    public int[] findErrorNums(int[] nums) {
        int[] ans = new int[2];

        //start of cyclic sort
        int i = 0;
        while(i < nums.length){
            int correctIndex = nums[i] - 1;
            if(nums[i] != nums[correctIndex]){
                int temp = nums[i];
                nums[i] = nums[correctIndex];
                nums[correctIndex] = temp;   
            }else{
                i++;
            }
        }
        //end of cyclic sort   

        
        for(int j=0 ; j < nums.length; j++){
            if(nums[j] != j+1){
                ans[0] = nums[j];    //to find, repeating number
                ans[1] = j + 1;      //to find missing number of error index
            }
        }

        return ans;   
    }
    //end of findErrorNums
}

op:-
nums =
[1,2,2,4]

Output
[2,3]

Expected
[2,3]

6] [URL:- ]

sol]

op:-
