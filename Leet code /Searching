// Searching related Leet code problems
  -------------------------------------

1] Sqrt(x) [URL:- https://leetcode.com/problems/sqrtx/description/]

sol] 
/*
//Intuition:
    We want to find the square root of a given non-negative integer x. Instead of using a traditional approach like 
repeatedly subtracting numbers until we reach 0 or using a library function, we'll use a smarter method called 
"Binary Search." Binary Search helps us quickly find the square root by repeatedly narrowing down the search range.

//Approach:
   1] We first check if x is 0 or 1. If it is, we know that the square root of 0 and 1 is 0 and 1 respectively, so we 
directly return x.

   2] For any other value of x, we set up a search range between 1 and x. We initialize two variables start and end to 
represent the range.

   3] Now comes the clever part: We use a while loop to repeatedly divide the search range in half (Binary Search) to 
find the square root.

   4] In each iteration of the loop, we calculate the middle value mid using the formula start + (end - start) / 2. 
This formula ensures that we don't encounter any integer overflow when dealing with large values of x.

   5] Next, we calculate the square of mid and compare it with x.

   6] If the square of mid is greater than x, we know the square root lies in the lower half of the search range. So, 
we move the end pointer to the left to narrow down the search range.

   7] If the square of mid is equal to x, we have found the square root! So, we return mid as the answer.

   8] If the square of mid is less than x, we know the square root lies in the upper half of the search range. So, we 
move the start pointer to the right to continue the search.

   9] We repeat steps 4 to 8 until the start pointer becomes greater than the end pointer. At this point, we have 
found the floor value of the square root, and end holds that value.

   10] To ensure that we return the correct floor value of the square root, we round down the value of end to the 
nearest integer using the Math.round() method.

//Complexity:-
 * Time complexity:
    The time complexity of this approach is O(logN). It's very efficient because Binary Search reduces 
the search range by half in each iteration, making the search faster.

 * Space complexity:
    The space complexity is O(1), which means the amount of extra memory used is constant, regardless of the 
input.We only use a few variables to store the search range and the middle value during the computation.

*/

prog:-

class Solution {
    public int mySqrt(int x) {
        
        //if x value is 0 or 1, we return 0 or 1 as the square root
        if( x == 0 || x == 1){
            return x;
        } 

        int start = 1;
        int end = x;
        int mid = -1;

        while(start <= end){
            mid = start + (end - start)/2;
            //if square of middle is greater than target, reduce search space to middle - 1.
            if((long)mid * mid > (long)x){
                end = mid - 1;
            }
            //if square of middle is equal to target return middle
            else if(mid * mid == x){
                return mid;
            }
            //if square of middle is smaller than target, reduce search space to middle + 1.
            else{
                start = mid + 1;
            }
        }
        return end;
    }
}

Good Explanation source:- [https://www.youtube.com/watch?v=1_4xlky3Y2Y]

op:-

x =
8

Output
2

Expected
2

2] Guess Number Higher or Lower [URL:- https://leetcode.com/problems/guess-number-higher-or-lower/description/]

sol]
/* 
1) Initialize first to 1 and last to n.
2) While first is less than or equal to last, do the following:
    a. Compute mid as first + (last - first) / 2.
    b. If guess(mid) returns 0, return mid.
    c. If guess(mid) returns -1, update last to mid - 1.
    d. If guess(mid) returns 1, update first to mid + 1.
3) Return -1.
*/

/*
Time Complexity and Space Complexity:
Time complexity:   O(logn)
Space complexity:  O(1)
*/

public class Solution extends GuessGame {
    public int guessNumber(int n) {
       int start = 1;
       int end = n;

       while( start <= end ){
           int mid = start + (end-start)/2;
           if(guess(mid) == 0){
               return mid;
           }
           else if(guess(mid) == -1){
               end = mid - 1;
           }else{
               start = mid + 1;
           }
        
       }
       return -1; 
    }
}

op:-

Input
2
1

3] 

sol]

op:-
Output
1

Expected
1
