// Cyclic sort
// Very important topic, asked in Amazon and Google. Understand the pattern.

/*
*
What is Cyclic sort?
--------------------

Consider an example:- 

arr   = [3,5,2,1,4]

So far, in the previous sorting algorithms we have used O(n^2) time to make the sort. (Because we use 2 for loops)
But what if, we can sort in just a single for loop?
 _                                                                                        _
|                                  VVVVVVVImp pattern                                      | 
|  Here comes an VVVVVVVImp point to remeber [This is also a pattern]:-                    |
|  ==================================================================                      |
|  * When a question gives number from range 1 to n - Always remeber to use Cyclic sort.   |
|_                                                                                        _|

so, lets get back to example to see hoe cyclic sort works,

index = [0,1,2,3,4]
arr   = [3,5,2,1,4]

Now we know that array contains numbers from 1 to n only. SO we know [n=5].

Consider the following cases:-
----------------------------
1)
suppose we consider, array is sorted, 

index = [0,1,2,3,4]
arr   = [1,2,3,4,5]

we can take the element 4 at index 3, and say that, [index = value - 1] eg:- {[2 = 3 - 1] , [3 = 4 - 1]}
why?
because index value start from 0, and we are given elements from 1 to n.

2)
We should also remember that we have to sort in 1 loop.

Now lets use what we consider to form the algorithm:-
---------------------------------------------------
we have,

index = [0,1,2,3,4]
arr   = [3,5,2,1,4]

now using the for loop, 
pass
1)  lets check our first element [3] in index [0]. 
    Is, this in the correct position, (No). So, we check where it belongs with [index = value - 1],
    where value is 3, so index = 3-1 = 2.
    Now we know that index 2 is where element 3 should be, so we directly swap it with index 2 , element 2.
    resulting in:- [2,5,3,1,4]

2)  We have put 3 in corrrect position, but that does not mean, index one is sorted.
    So, we check again if index 0 is sorted, we find out that it isn't.
    We say so because, index = 2 - 1 = 1, which means 2 should be at index 1 and not 0.
    Swap takes place, replacing element in index 1 to index 0 and vise versa. 
    resulting in:- [5,2,3,1,4]

3)  Again index 0 may not have the correct value. So we check again. is 5 the correct value for index 0.
    index = 5-1 = 4. We now know 5 belongs to index 4 and so another swap takes place.
    arr = [4,2,3,1,5]

4)  Again check if 4 belongs to index 0. If not swap with correct index. index = 4-1 = 3.
    We swap it with correct index. hence we get
    arr = [1,2,3,4,5]

5)  Now it checks if 1 is at the correct index, Yes, then move to next element.
    Is, 2 at the correct index, Yes, then move to next element.
    Is, 3 at the correct index, Yes, then move to next element.
    Is, 4 at the correct index, Yes, then move to next element.
    Is, 5 at the correct index, Yes, then loop is over and sorting is complete.

So, how many swaps are being made?
---------------------------------

In worst case:- (The above example is a worst case)
-------------
As we know in while loop:- (n-1) swaps are need to be made.
(n-1) swaps are being made for this also.
Why? becuase if all the elements before the last element[1,2,3,4] are sorted, does that not mean the last 
element[5] is also sorted.

So, in the above example, 
=> 4 swaps were made (1-4) + After that we checked each and every element, so 5 swaps made. 
=> (n-1) + n => (2n - 1)swaps => O(n), constants are removed in complexity

In Best case:-
------------

arr=[1,2,3,4,5] - as we know already sorted array.
Time complexity is O(n).

Space complecity:-
----------------

No new space is being made, so we only have O(1).

*
*/

1] Apply cyclic sort on an unsorted array and get it sorted.

sol]

