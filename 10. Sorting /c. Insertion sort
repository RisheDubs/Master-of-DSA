// Insertion sort
   --------------

/*
* 
Insertion sort working
----------------------

consider an array for example, arr=[5,3,4,1,2]

So, insertion sort says that, try sorting the given array in parts and parts. Like first sort the initial part, 
which is index 0 of the array. then sort till index number 1, then till index number 2, and so until last index.

So, this is how it looks like,
arr = [5,3,4,1,2]
1st sort from index 0 to 1 - [5,3]           => After sort => [3,5]
2nd sort from index 0 to 2 - [3,5,4]         => After sort => [3,4,5]
3rd sort from index 0 to 3 - [3,4,5,1]       => After sort => [1,3,4,5]
4th sort from index 0 to 4 - [1,3,4,5,2]     => After sort => [1,2,3,4,5]

What exactly is happening in the above sorting algorithm?
---------------------------------------------------------

take the 3rd sort for example, the index form 0 to 2 is sorted [3,4,5] and we expand our sort to index 3[1].
Now we sort, by pushing the larger element behind the smaller element, which is [1]. hence we get the result [1,3,4,5]
Simply speaking, we put the index element [1] at the correct index of LHS [3,4,5].

Internal working of insertion sort
----------------------------------
index = [0,1,2,3,4]
arr   = [5,3,4,1,2]
-----------------------------------------------------------------------
Pass        |            arr              |i <= n-2 |       j < 0     | 
------------|-----------------------------|---------|-----------------|
            |                             |         |                 |
1           |      sort till index 1      |     0   |   i+1 = 0+1 = 1 |
2           |      sort till index 2      |     1   |   i+1 = 1+1 = 2 |
3           |      sort till index 3      |     2   |   i+1 = 2+1 = 3 |
4           |      sort till index 4      |     3   |   i+1 = 3+1 = 4 |
-----------------------------------------------------------------------

So, as we can see, we only need i to run from index 0 to 3. so i=n-2[where n is length of array].

NOTE:- In the Pass 2, we compare the index 0 to 2 [3,5,4] - here j=2, hence we start comparing, 
if 4<5 => [3,4,5], again we check if 4<3, we hit a break condition. This happens because the left hand side 
is already sorted if element j not smaller than j-1.

Also, if i=4, then j which is i+1 becaomes 5, which is out of bounds. this is why i<n-2, where n is length of array.

What is the complexity of selection sort?
------------------------------------------

Worst case:-
----------
In worst case :- O(n^2), where n is the size of array.
Why?
because the array is in descending order [5,4,3,2,1]- this will take 4 comparisons
So we can say that, the number of comparisons is from 1,2,...,(n-1)
here, sum of n numbers is = n(n+1)/2 -> (1)
when n = n-1, (1) becomes, (n-1)(n-1+1)/2 => (n-1)(n)/2 {which is actual number of comparisons} => o(n^2-n/2)
=> O(n^2)

Best case:-
---------
In best case:- O(n), where n is the size of array.
why?
Arrays is already sorted, [1,2,3,4,5] - The number of comparisons made were (n-1), which is linear. and so complexity
is O(n).

So, Why use insertion sort?
---------------------------
Because it is,
1] Adaptive:- steps get reduced if array is sorted. fro example, If j not less than (j-1) then break the loop.
   So, number of swaps are reduced as compared to bubble sort.
2] It is Stable
3] Used for smaller values of n(size of array), * works good when the array is partially sorted *. <- this is the 
   reason why it takes part in hybrid sorting algorithms. hybrid sorting algos mean merge sort or quick sort and 
   combines with insertion sort since it works well with smaller arrays.
*
*/

1] Use insertion sort on an unsorted array to get the result in sorted form

sol]
package javatpoint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;


public class Student{
	public static void main(String[] args) {
		int[] arr = {5,3,4,1,2};
		insertionSort(arr);
		System.out.println(Arrays.toString(arr));
	}
	
	static void insertionSort(int[] arr) {
		int n = arr.length;
		for(int i = 0; i < n - 1; i++) {
			for(int j = i+1; j > 0; j--) {
				if(arr[j] < arr[j-1]) {
					int temp = arr[j];
					arr[j] = arr[j-1];
					arr[j-1] = temp;
				}else {
					break;
				}
			}
		}
	}	
}
	
op:-
[1, 2, 3, 4, 5]
