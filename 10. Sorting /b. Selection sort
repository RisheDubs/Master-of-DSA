// Selection sort

/*
* How does Selection sort work?
  ----------------------------
* Lets take an array:- arr = [4,5,1,2,3];
* Selection  sort says that, select a particular element and put it in its correct index. This can be done in 2 ways:-
*
* - Select the largest elemnt in the array and put it in its correct index, then the second largest and so on.
*   working:-
*   ^ take the largest element [5], this will be swapped with the last index element [3] => [4,3,1,2,5]
*   ^ now take the second largest element in array [4], swap it with second last index element(because last index sorted)
*     => [2,3,1,4,5]
*   ^ now only the first 3 elements are left( since last 2 indexes sorted already), so [3] is the largest, swap with [1]
*     => [2,1,3,4,5]
*   ^ now, first 2 indexes remain unsorted, the largest among them 2 is [2], swap it with [1] => [1,2,3,4,5] => End
*
* - Another approach is taking the smallest element and putting it in the correct index, the steps are same but only
*   differed in the finding smallest element, instead of largest.
*   ^ Take the smallest element, [1] and swap it with the first element [4] => [1,5,4,2,3]
*   ^ Take the second smallest element, [2] and swap it with the second element [5] => [1,2,4,5,3], leaving first 2 
*     indexes sorted.
*   ^ Among the last 3 indexes, the smallest one is [3], replace it with [4] => [1,2,3,5,4], leaving the final 2 unsorted
*     indexes
*   ^ Finally, swap [4] with [5] => [1,2,3,4,5]
*
*   Complexity of selection sort
    ----------------------------
*   The algorithm is making comparisosn each time, to find the largest elemnt and swapping positions.
*   So, it is safe to say that, in step 1- it made (n-1) comparisons, step 2- (n-2) comparisons, step 3- (n-3) and 
*   step 4- (n-4) comparisons...until (0) comparisons
*   
*   So, total comparisons => 0 + 1 + 3 +...+ (n-1)
*   Using mathamatical formula, we can say sum of N numbers is => (n*n+1)/2
*   Which becomes => ((n-1) + (n-1+1))/2 [here, n = n-1 (from total comparisons part)]
*   upon solving, n(n-1)/2 => (n^2 - n)/2 => we know that in complexity, constants and less dominating terms are removed
*   which concludes us with => n^2 => O(n^2) , which is the total comparisons
*
*   So, what is the best and worst case?
        --------------------------------
*   Worst case - O(n^2)
*   Best case - O(n^2)
*
*   So, is it Stable sort algorithm?
        ---------------------------
*   No
*
*   What is the use case of selection sort?
    ---------------------------------------
*   It performs well on small lists and arrays
*
*/

1] Perform selection sort on a unsorted array

sol]
package javatpoint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;


public class Student{
	public static void main(String[] args) {
		int[] arr = {5,3,2,4,1};
		selectionSort(arr);
		System.out.println(Arrays.toString(arr));
	}
	
	static void selectionSort(int[] arr) {
		
		for(int i = 0; i < arr.length; i++) {
		// find the max element in array and replace it with last index element
		int last = arr.length - i - 1; // gives the last index of the array [last = 5-0-1 = 4] (i updates every loop, so last element need not be included in future sort)
		// find the max element in the array
		int maxElement = maxVal(arr, 0, last); 
		// after finding the max element, swap it with the last index in array
		swapElement(arr, maxElement, last);
			
		}
	}
	
	static int maxVal(int[] arr, int start,int end) {
		int max = start; //start takes index values only not the element
		for(int i = start; i <= end; i++) {
		if(arr[max] < arr[i] ) {
			max = i;
		}
		}
		return max;
	}
	
	static int swapElement(int[] arr, int first,int second) {
		
		int temp = arr[first];
		arr[first] = arr[second];
		arr[second] = temp;
		
		return temp;
	}
	
	
}
	
op:-
[1,2,3,4,5]
	
