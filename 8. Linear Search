//Searching :- means searching in an array of elements to get a value

//Linear search is a type of search in which we start searching from the first element until we find our desired element.

/* consider an exaple to demonstrate best and worst case scenarios
*  question: find the element 18 from an array of 200 elements
* The scenario:- 
* best case:- means you find the element in the first loop
* worst case:- means you dont find the element you are looking for in the array at all
*/

//Do linear search to find if the element exists in the array or not

//sol]
package javatpoint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;


public class Student{
	public static void main(String[] args) {
	
		Scanner input = new Scanner(System.in);
		int[] arr = {12,3,45,76,89,-11,46,97};
		int target = 12;
		int ans = linearSearch(arr,target);
		System.out.println(ans);
	}
	
	static int linearSearch(int[] arr, int target) {
		//if array empty return -1
		if(arr.length == 0) {
			return -1;
		}
		
		//traverse the elements in the loop
		//if element exists return the element
		for(int i=0;i<arr.length;i++) {
			int element = arr[i]; //assume first value in array as answer 
			if(element == target) { //then check for the value you are searching
				return element;
			}
		}
		//if no conditions are satisfied then return -1
		return -1;
	}
	
}

op:-

12  //meaning it exists

Q1] linear search a chracter in a given string.

sol]
package javatpoint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;


public class Student{
	public static void main(String[] args) {
		String name = "Rishe";
		char searchString = 'o';
		boolean charExist = stringSearch(name,searchString);
		System.out.println(charExist);
	}
	//for loop
	static boolean stringSearch(String name, char target) {
		if(name.length() == 0 ) {
			return false;
		}
		
		for(int i=0; i<name.length();i++) {
			if(target == name.charAt(i)) {
				return true;
			}
		}
		
		return false;
	}
	
	//for each loop
	static boolean stringSearch2(String name, char target) {
		if(name.length() == 0 ) {
			return false;
		}
		
		/*to use a for each loop we need to have 
		*a collection or array. since we dont have
		*either of them, we use toCharArray() to
		*convert the string into a array of characters
		*/
		for(char ch:name.toCharArray()) { // name = ['r','i','s','h','e'];
			if(ch == target) {
				return true;
			}
		}
		
		return false;
	}
	
	
}

output:- 

False

Q2] find if element exists within a particular range.

sol] 
package javatpoint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;


public class Student{
	public static void main(String[] args) {
		int[] arr = {1,2,3,4,5,6};
		int target = 5;
		int ans = searchInRange(arr,target,1,4);
		if(ans == 1)
			System.out.println("it exists in array ");
		if(ans == -1)
			System.out.println("it does not exist in array ");

	}
	
	static int searchInRange(int[] arr, int target, int start, int end) {
		if(arr.length==0) {
			return -1;
		}
		
		for(int i=start;i<= end;i++) {
			int value=arr[i];
			if(value == target) {
				return 1;
			}
		}
		return -1;
	}
	
}

output:-

it exists in array 

Q3] to find the minimum value in an array

sol] 
package javatpoint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;


public class Student{
	public static void main(String[] args) {
		int[] arr = {12,23,3,-4,58,6};
		int ans = minValue(arr);
		System.out.println(ans);
		
	}
	
	static int minValue(int[] arr) {
		int minVal = arr[0]; 
		for(int i=1;i<arr.length;i++) {
			
			if(arr[i]<minVal) {
				minVal = arr[i];
				
			}
		}
		
		return minVal;
	}
	
	
}

ouput:-

-4

Q4] to search an element in 2d array and return its index value

sol]
package javatpoint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;


public class Student{
	public static void main(String[] args) {
		int[][] arr = {
				{12,23,45,56},
				{3,47,89},
				{90,4,25,83},
				{10,77}
			};
		
		int target = 77;
		int[] ans = twoDSearch(arr,target); 
		System.out.println(Arrays.toString(ans));	
	}
	
	static int[] twoDSearch(int[][] arr,int target) {
		for(int row = 0;row<arr.length;row++) {
			for(int col=0; col<arr[row].length;col++) {
				if(arr[row][col] == target) {
					return new int[]{row,col};
				}
			}
		}
		return new int[] {-1,-1};
	}
	
	
	
}

op:-
[3,1] //target-77

Q5] find the maximum in 2d array and return the index value

sol] 
package javatpoint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;


public class Student{
	public static void main(String[] args) {
		int[][] arr = {
				{12,23,45,56},
				{3,47,89},
				{90,400,25,83},
				{10,770}
			};
		
		int ans = maximumTwoD(arr);
		System.out.println(ans);
	}
	
	static int maximumTwoD(int[][] arr) {
		int max = arr[0][0];   //can also use :- Integer.MIN_VALUE, Whose value is -2147483648
		for(int row=0; row<arr.length;row++) {
			for(int col=0;col<arr[row].length;col++) {
				if(arr[row][col]>max) {
					max = arr[row][col];
				}
			}
		}
		return max;
	}
	
	
	
}

op:-
770

Q6] find the number of 'even number of digits' from an array of numbers and return the total count.

sol] 
package javatpoint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;


public class Student{
	public static void main(String[] args) {
		int[] arr = {1,23,4,567,7654};
		int ans = checkEvenDigits(arr);
		System.out.println(ans);
	}
	
	static int checkEvenDigits(int[] arr) {
		int count = 0;
		for(int num:arr) {
			if(evenDigits(num)) {
				count ++;
			}
		}
		return count;
	}
	
	static boolean evenDigits(int num) {
		
		int numberOfDigits = numberOfDigits(num);
		/*
		if(numberOfDigits%2 == 0) {
			return true;
		}else {
			return false;
		} 
		*/
		return numberOfDigits%2 == 0; //same as above
	}
	
	static int numberOfDigits(int num) {
		
		//in case if we have any negative numbers counted
		if(num < 0) {
			num = num * -1;
		}
		
		//in case we have 0 as a digit, we need to count it as well
		if(num == 0) {
			return 1;
		}
		
		int count = 0;
		while(num > 0){
			count++;
			num = num/10;
			
		}
		
		return count;
	}
	
	
}

op:-

2 
