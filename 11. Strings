// Strings and String Builders
// Strings are a collection of characters. eg - String name = "Rishe";

/* Internal working of strings
*
When we take the example, String name = "Rishe";
We think how does this store internally and work the way it is supposed to.

Lets take some String knowledge to understand,
---------------------------------------------
- String is the most used class in java's class library
-|- Every wonder why onlt String start with a caps "S", because it is a "class", All classes in java start with caps.
- Lets split the example :- String     name                 =   "Rishe";
                            Data type  reference variable        object

So next question is how is it being stored internally?
-----------------------------------------------------
Lets take another example,
String A = "Rishe";
String B = "Rishe";
Here we might think, "Is it creating 2 different objects" or "Both the reference variables pointing to the same object"?
In order to know this, we need 2 important concepts to be understood, 
                                          ---------
- String pool
 What is a string pool, Lets take the verh first example, When we take String name = "Rishe"; - it is being stored 
 like this in the memory
 
                       Heap - sepearte memory , Use case - makes our program optimized
 |         |           |--------------|
 |         |           |   |-------|  | 
 |   name  |           |   |pool   |  |
 |         |           |   |"Rishe"|  |
 |         |           |   |_______|  |
 |_________|           |              | Where name is pointed towards "Rishe".

 Definition:- 
 String pool is nothing but a seperate memory structure inside the heap.
 
 Use case:- 
 Why a seperate pool? Why cant we just put it inside the heap like we do for any other objects?
 Because, All the simillar values of strings are not recreated in the pool.
 What this means is that, take the latest example of string A and string B pointing towards the same, "Rishe",
 The pool checks and be like, "Rishe" already exist in the pool, so let refernce variable "B" point towards the same
 object in the pool.

 SO what is a heap?
              -----
So heap is basically a seperate memory, and its use case is to optimize the program. If we take the previous example, 
suppose instead of jut 2 reference variable, there exist 10 more, the heap wont create 10 different objects, but
it will point towards the one that is similar to the one we just created.
              
- Immutability
Strings are immutable in java, meaning you cannot change a string object once created. 
Eg:- suppose if I want to rename STring A to something like = "Rishekesh", I cannot do that, instead I will have to
     create a new object only.
Why are Strings immutable, For "Security reasons". We know that for optimisation using string pool there are many 
reference variables pointing towards the same object.

Now lets see something of an example,

prog:-
String a = "Rishe";
System.out.println(a);
a = "rishekesh";
System.out.println(a);

op:-
Rishe
Rishekesh

Doubt, It was said that Strings are immutable, but how did "a" get changed?
If you notice carefully, You can see that, we are not updating "a", but creating a new object.
How?
Lets represent it,

first We said a = "Rishe"; 

 |         |           |--------------|
 |         |           |   |-------|  | 
 |   a     |           |   |pool   |  |
 |         |           |   |"Rishe"|  |
 |         |           |   |_______|  |
 |_________|           |              | Where a is pointed towards "Rishe".

 Then we said a = "Rishekesh";

 |         |           |--------------|
 |         |           |   |-------|  | 
 |   a     |           |   |pool   |  |
 |         |           |   |"Rishe"|  |
 |         |           |   |"Rsesh"|  |
 |_________|           |   |_______|  | Where a is pointed towards "Rsesh". Which is the new object created.

 In the above example, we did not change the object, We just created a new object.
 So what will happen to the old object, "Rishe"?
 Simple, it goes to the garbage collection.
                        ------------------

Why immutability though?

consider this example,
 |         |           |--------------|
 |         |           |   |-------|  | 
 |   p1    |           |   |pool   |  |
 |   p2    |           |   |"Rishe"|  |
 |   p3    |           |   |       |  |
 |_________|           |   |_______|  | Where p1,p2,p3 are pointed towards "Rishe".

 If there are multiple people with same as "Rishe", and supposidly, one of the persons decide to change their name,
 for example, P1 decides to change their name to "Kesh", then ultimately all the persons in the database names will
 be changed to "Kesh", if string were not immutable. This si the security reason.

Now , How do we know that more than 2 reference varibales are pointing towards the same object or diff object?

consider example,

prog:-
String a = "Rishe";
String b = "Rishe";
System.our.println(a == b);

op:-
true //with a warning

What is happening here?
There are 2 ways to compare strings actually,
1] == method, where == is a comparator

   when a = "Rishe"      but     when a -->} "Rishe"
   and  b = "Rishe"              and  b -->}  
   a == b is false               a == b is true

   So, what is == doing here?
   It actually checks for both the values and the reference variable, if the reference variable is pointing
   towards the same object 

// How to create different objects of same value?

consider, String a = new String("rishe");
          String b = new String("rishe");
// creating this values outside the pool but in heap
// Internally, this is how it works

 |         |           |--------------|
 |         |           |   |-------|  | 
 |   p1    |           |   |pool   |  |
 |   p2    |           |   |_______|  |
 |   p3    |           |   |"Rishe"|  | a points to the first "rishe" and b points to the later one.
 |_________|           |   |"Rishe"|  | It is creating objects outside the pool but inside the heap.

Even though the values are same, both a and b are not pointing towards the same objects. In this case,
a == b is false.

2] When you only need to check value. Use ".equals" method.

//CharAt(index)
  ------------

String, unlike arrays cant be accesed through index number using for loop. Hence we use a string function called
".charAt()", what this basically does is, it returns the index value from the string. or from the specific 
position of the String.

eg:- name = "Rishe";
     ans = name.charAt(0); // we need the element at position 0 of String ans.
     System.out.println(ans); // returns R; 

Println
-------

Here we are going to see how println works on integers.

First of all, Anything you print on println, calls the "to.String" method.
So, every value you need to get, the sequence goes like, ur input -> .value -> to.string, this is the format.

pretty printing (needed for competative programming)
---------------
prog:-

package javatpoint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;


public class Student{
	public static void main(String[] args) {
		// Pretty printing in java
		float num = 12.34567f;
		//we use "printf" for formated string. It rounds off as well.
		System.out.printf("the formated number is %.2f",num); //here % is place holder and 
                                                            number after . are the digits included in the output
		System.out.println(" ");
		System.out.printf("hi my name is %s, and i love %s","rishe","juice");
	}
}

op:-
the formated number is 12.35 
hi my name is rishe, and i love juice

String concat
-------------

package javatpoint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;


public class Student{
	public static void main(String[] args) {
		// String concat vs char + char
		System.out.println('a' + 'b'); //char + char, converts the char into Ascii value and returns the integer answer
		System.out.println("a" + "b"); //string + string, concats the string and gives the result
		System.out.println(('a' + 3)); //gives the value of d,100 [a,97 + 3 = 100,d] 
		System.out.println((char)('a' + 3)); //The above operation takes place, but since char is present, we get ascii value of d
		System.out.println("a" + 1); //But unlike characters, integers will be converted to Integer that will call toString()
		//integer is calling a 2 string function, which makes it "a" + "1" after a few steps.
		System.out.println("a" + new ArrayList<>());
		//Similar to what integers did above, ArrayList calls the toString function.
		// Simply put, if there is object, then we call toString on it. Java looks at our print statement and 
		// be like, "oh there is a string and the next part isnt", and it converts into a string by calling in  
		// the toString method
		System.out.println("a" + new Integer(53));
		
		//error cases
		//take this example for instance
		//System.out.println(new Integer(56) + new ArrayList<>());
		//So this is what is happening. The operator + for java is only used for primitives and when any one 
		// the values to be added is a string.
		
		//So, if we add a string to the error expression from before, say
		System.out.println(new Integer(56) + "" + new ArrayList<>()); //this will work since string is present
		
		//Why does java give us this many functions for + operator.
		//Since we have been using + since our childhood days, we know its functionalities, Java just decided
		// to put that knowledge into use, Since this can be called "operator overloading". because operator is
		// giving us more functionalities.

	}
}

performance
-----------

// consider this example

package javatpoint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;


public class Student{
	public static void main(String[] args) {
		String series = "";
		for(int i=0; i<26; i++) {
			char ch = (char)('a'+i);
			series = series + ch;
		}
		System.out.println(series);
	}
}

op:-
abcdefghijklmnopqrstuvwxyz

// This is a program to print all the alphabets from a to z, but this program is not an optimized code.
//Why?

lets take the first loop of the program,

loop 1 - series = " " + 'a' => "a"
loop 2 - series = "a" + 'b' => "ab"
loop 2 - series = "ab" + 'c' => "abc"

As we can see above, new object is being created everytime the loop runs, hence taking more storage in the heap. 
Why cant we update the exisiting series string, because strings are immutable, hence new objects are created.
So in the end, every previous loop elements wont have a reference variable pointing towards them. for example,
[a,ab,abc,abcd,....,abcdef..y] would be a wasted space. Thus this a time complexity of O(N^2). 
Now, this is not a very good time complexity. 
So, what if we had a datatype that does not create new onject, but modify the same string...
This is where string builder comes in.

String Builder
--------------

String builder is also a seperate class like Strings

prog:- 

package javatpoint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;


public class Student{
	public static void main(String[] args) {
		StringBuilder builder = new StringBuilder(); //StringBuilder is a class. 
		for(int i=0; i<26; i++) {
			char ch = (char)('a'+i);
			builder.append(ch);
		}
		System.out.println(builder.toString());
	}
}

op:-
abcdefghijklmnopqrstuvwxyz

// No new space is taken, the existing String is being updated over and over again.
// There are also many StringBuilder operations in Java, They are self explanatory.

String methods
--------------

package javatpoint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;


public class Student{
	public static void main(String[] args) {
		String name = "Rishekesh";
		System.out.println(Arrays.toString(name.toCharArray())); //toCharArray, gets each individual character in String, but Arrays.toString actually makes string to array. 
		System.out.println(name.toLowerCase()); //makes each individual character in String to lowercase.
		System.out.println(name.indexOf('i')); //Finds the specific char in String.
		System.out.println("        Rishek    ".strip());//removes the space from front and back
		
		
		
	}
}

op:-

[R, i, s, h, e, k, e, s, h]
rishekesh
1
Rishek

Questions
---------

1] Check if string palindrome or not

sol]
package javatpoint;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;


public class Student{
	public static void main(String[] args) {
		String str = "abcba";
		System.out.println(palindromForStrings(str));
		
	}
	public static boolean palindromForStrings(String str) {
		if(str == null || str.length() == 0) {
			return false;
		}
		str = str.toLowerCase();
		for(int i = 0; i<=str.length()/2; i++) {
			char start = str.charAt(i);
			char end = str.charAt(str.length() - 1 - i);
			
			if(start != end) {
				return false;
			}
		}
		return true;
	}
}

op:-
true

